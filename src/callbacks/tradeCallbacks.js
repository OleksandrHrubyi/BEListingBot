import { getCurrentPrice } from "../logic/getCurrentPrice.js";
import { getIndicatorsText } from "../logic/getIndicatorsText.js";
import autoBuy from "../logic/autoBuyHandler.js";

export default function tradeCallbacks(bot) {
  bot.on("callback_query", async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    // –ü–æ–∫—É–ø–∫–∞ CMC
    if (data.startsWith("cmc_confirm_buy_")) {
      const [_, symbol, usdt] = data.split("_");
      await bot.sendMessage(
        chatId,
        `‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∫—É–ø—ñ–≤–ª—é ${symbol} –Ω–∞ ${usdt} USDT`
      );
      autoBuy(symbol, usdt, bot, chatId);
    }

    // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏
    if (data.startsWith("cmc_cancel_buy_")) {
      const symbol = data.split("_")[3];
      await bot.sendMessage(chatId, `‚ùå –ü–æ–∫—É–ø–∫—É ${symbol} —Å–∫–∞—Å–æ–≤–∞–Ω–æ`);
    }

    // –ö–Ω–æ–ø–∫–∞ –®–æ—Ä—Ç
    if (data.startsWith("short:")) {
      const [_, currency, exchange] = data.split(":");

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É —ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
      let price = await getCurrentPrice(currency, exchange);
      let indicatorsText = await getIndicatorsText(currency, exchange);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü—ñ–Ω–∞ –Ω–µ "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
      if (!price || price === "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ") {
        price = "–¶—ñ–Ω–∞ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
      }

      // –Ø–∫—â–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è —è–∫ –æ–±'—î–∫—Ç, –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —ó—Ö —É —Ç–µ–∫—Å—Ç
      if (typeof indicatorsText === "object") {
        indicatorsText = JSON.stringify(indicatorsText, null, 2); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —É –∑—Ä–æ–∑—É–º—ñ–ª–∏–π —Ñ–æ—Ä–º–∞—Ç
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —à–æ—Ä—Ç
      await bot.sendMessage(
        chatId,
        `
üîª –í–∏ –æ–±—Ä–∞–ª–∏ —à–æ—Ä—Ç –¥–ª—è <b>${currency}</b> (${exchange}):

üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: <b>${price}</b>

üìä –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏:
<pre>${indicatorsText}</pre>

‚ùó –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –¥—ñ—é –ø–µ—Ä–µ–¥ –≤–∏–±–æ—Ä–æ–º —Å—É–º–∏ —Ç–∞ –ø–ª–µ—á–∞.
        `,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —à–æ—Ä—Ç",
                  callback_data: `short_confirm:${currency}:${exchange}`,
                },
                {
                  text: "–°–∫–∞—Å—É–≤–∞—Ç–∏",
                  callback_data: `cancel_short:${currency}:${exchange}`,
                },
              ],
            ],
          },
        }
      );
    }

    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —à–æ—Ä—Ç—É
    else if (data.startsWith("short_confirm:")) {
      const [_, currency, exchange] = data.split(":");

      await bot.sendMessage(
        chatId,
        `‚öôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å —Å—É–º—É –¥–ª—è —à–æ—Ä—Ç—É –Ω–∞ <b>${currency}</b> (${exchange}):`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "50 USDT",
                  callback_data: `short_amount:${currency}:${exchange}:50`,
                },
                {
                  text: "100 USDT",
                  callback_data: `short_amount:${currency}:${exchange}:100`,
                },
              ],
              [
                {
                  text: "500 USDT",
                  callback_data: `short_amount:${currency}:${exchange}:500`,
                },
                {
                  text: "1000 USDT",
                  callback_data: `short_amount:${currency}:${exchange}:1000`,
                },
              ],
            ],
          },
        }
      );
    }

    // –í–∏–±—ñ—Ä —Å—É–º–∏ –¥–ª—è —à–æ—Ä—Ç—É
    else if (data.startsWith("short_amount:")) {
      const [_, currency, exchange, amount] = data.split(":");

      await bot.sendMessage(
        chatId,
        `‚öôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –ø–ª–µ—á–µ –¥–ª—è <b>${currency}</b> (${exchange}) –Ω–∞ <b>${amount} USDT</b>:`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "3x",
                  callback_data: `short_final:${currency}:${exchange}:${amount}:3`,
                },
                {
                  text: "5x",
                  callback_data: `short_final:${currency}:${exchange}:${amount}:5`,
                },
              ],
              [
                {
                  text: "10x",
                  callback_data: `short_final:${currency}:${exchange}:${amount}:10`,
                },
                {
                  text: "20x",
                  callback_data: `short_final:${currency}:${exchange}:${amount}:20`,
                },
              ],
            ],
          },
        }
      );
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —à–æ—Ä—Ç—É
    else if (data.startsWith("short_final:")) {
      const [_, currency, exchange, amount, leverage] = data.split(":");

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü—ñ—ó
      await bot.sendMessage(
        chatId,
        `
üìâ <b>–®–æ—Ä—Ç –≤—ñ–¥–∫—Ä–∏—Ç–æ</b>
ü™ô –ú–æ–Ω–µ—Ç–∞: <b>${currency}</b>
üí∞ –°—É–º–∞: <b>${amount} USDT</b>
üìà –ü–ª–µ—á–µ: <b>${leverage}x</b>
üè¶ –ë—ñ—Ä–∂–∞: <b>${exchange}</b>

üöÄ –í–∞—à —à–æ—Ä—Ç –≤—ñ–¥–∫—Ä–∏—Ç–æ —É—Å–ø—ñ—à–Ω–æ!
        `,
        { parse_mode: "HTML" }
      );
    }

    // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —à–æ—Ä—Ç—É
    else if (data.startsWith("cancel_short:")) {
      const [_, currency, exchange] = data.split(":");

      await bot.sendMessage(chatId, `‚ùå –®–æ—Ä—Ç –Ω–∞ <b>${currency}</b> (${exchange}) —Å–∫–∞—Å–æ–≤–∞–Ω–æ`, {
        parse_mode: "HTML",
      });
    }

    // –©–æ–± Telegram –Ω–µ –∑–∞–≤–∏—Å–∞–≤ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
    await bot.answerCallbackQuery(query.id);
  });
}
