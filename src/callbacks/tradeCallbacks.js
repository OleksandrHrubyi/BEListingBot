export default function tradeCallbacks(bot) {
  bot.on("callback_query", async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith("cmc_confirm_buy_")) {
      const [_, symbol, usdt] = data.split("_"); // cmc_confirm_buy_BLABLA_100
      await bot.sendMessage(
        chatId,
        `‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∫—É–ø—ñ–≤–ª—é ${symbol} –Ω–∞ ${usdt} USDT`
      );

      // –¢—É—Ç –≤–∏–∫–ª–∏–∫–∞—î–º–æ –∞–≤—Ç–æBuy —Ñ—É–Ω–∫—Ü—ñ—é (import –∑ autoBuyHandler)
      const { autoBuy } = await import("../logic/autoBuyHandler.js");
      autoBuy(symbol, usdt, bot, chatId);
    }

    if (data.startsWith("cmc_cancel_buy_")) {
      const symbol = data.split("_")[3];
      await bot.sendMessage(chatId, `‚ùå –ü–æ–∫—É–ø–∫—É ${symbol} —Å–∫–∞—Å–æ–≤–∞–Ω–æ`);
    }

    if (data.startsWith("short:")) {
      const currency = data.split(":")[1];

      await bot.sendMessage(
        chatId,
        `üîª –í–∏–±–µ—Ä–∏ —Å—É–º—É –¥–ª—è —à–æ—Ä—Ç—É –Ω–∞ <b>${currency}</b>:`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "50 USDT",
                  callback_data: `short_amount:${currency}:50`,
                },
                {
                  text: "100 USDT",
                  callback_data: `short_amount:${currency}:100`,
                },
              ],
              [
                {
                  text: "500 USDT",
                  callback_data: `short_amount:${currency}:500`,
                },
                {
                  text: "1000 USDT",
                  callback_data: `short_amount:${currency}:1000`,
                },
              ],
            ],
          },
        }
      );
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å—É–º–∏ —Ç–∞ –ø–æ–∫–∞–∑ –ø–ª–µ—á–∞
    else if (data.startsWith("short_amount:")) {
      const [_, currency, amount] = data.split(":");

      await bot.sendMessage(
        chatId,
        `‚öôÔ∏è –í–∏–±–µ—Ä–∏ –ø–ª–µ—á–µ –¥–ª—è <b>${currency}</b> –Ω–∞ <b>${amount} USDT</b>:`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "3x",
                  callback_data: `short_confirm:${currency}:${amount}:3`,
                },
                {
                  text: "5x",
                  callback_data: `short_confirm:${currency}:${amount}:5`,
                },
              ],
              [
                {
                  text: "10x",
                  callback_data: `short_confirm:${currency}:${amount}:10`,
                },
                {
                  text: "20x",
                  callback_data: `short_confirm:${currency}:${amount}:20`,
                },
              ],
            ],
          },
        }
      );
    }

    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —à–æ—Ä—Ç—É (–º–æ–∂–Ω–∞ –±—É–¥–µ —Ç—É—Ç –≤–∏–∫–ª–∏–∫–∞—Ç–∏ API –±—ñ—Ä–∂—ñ)
    else if (data.startsWith("short_confirm:")) {
      const [_, currency, amount, leverage] = data.split(":");

      // –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ –±—ñ—Ä–∂—ñ –∞–±–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–º—ñ—Ä —É –ë–î
      await bot.sendMessage(
        chatId,
        `
üìâ <b>–®–æ—Ä—Ç –≤—ñ–¥–∫—Ä–∏—Ç–æ</b>
ü™ô –ú–æ–Ω–µ—Ç–∞: <b>${currency}</b>
üí∞ –°—É–º–∞: <b>${amount} USDT</b>
üìà –ü–ª–µ—á–µ: <b>${leverage}x</b>
          `,
        { parse_mode: "HTML" }
      );
    }

    // –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–≤–∏—Å–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
    await bot.answerCallbackQuery(query.id);
  });
}
