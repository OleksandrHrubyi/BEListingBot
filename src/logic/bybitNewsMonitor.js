import { DelistedCoin } from '../models/DelistedCoin.js';
import axios from 'axios';
import dotenv from "dotenv";
dotenv.config();
import bot from '../index.js';

const API_URL =
  "https://api2.bybit.com/announcements/api/search/v1/index/announcement-posts_en";

export default async function fetchBybitNews() {
  try {
    const { data } = await axios.post(API_URL, {
      query: "",
      page: 0,
      hitsPerPage: 8,
      filters: "category.key: 'delistings'"
    });

    const items = data?.result?.hits || [];
 
    // –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ –¥–µ–ª—ñ—Å—Ç–∏–Ω–≥
    for (const item of items) {
      const { url, title, description } = item;

      if (!description) {
        console.warn(`–ù–æ–≤–∏–Ω–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É: ${title}`);
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü—é –Ω–æ–≤–∏–Ω—É
      }

      const currency = await extractCoinSymbolFromTitle(title);
      const name = await extractCoinNameFromContent(description);

      setTimeout(() => {
        console.log(`–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏–Ω–∏: ${title}`);
      }
      , 1000);

      if (!currency) {
        console.warn(`–°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –Ω–æ–≤–∏–Ω–∏: ${title}`);
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü—é –Ω–æ–≤–∏–Ω—É
      }



      const existingCoin = await DelistedCoin.findOne({ currency });
      if (!existingCoin) {
        await DelistedCoin.create({
          title,
          currency,
          pair: currency + "USDT",
          url: `https://announcements.bybit.com/en/${url}`,
          exchange: "Bybit",
          dateDetected: new Date(),
          description,
          name,
        });

        const message = 
        `üö® <b>DELISTING ALERT</b> üö®\n\n` +
        `üí£ <b>${currency}</b>\n` +
        `üìâ <b>–ü–∞—Ä–∞:</b> <code>${currency}USDT</code>\n` +
        `üïí <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('uk-UA')}\n\n` +
        `üìå <b>–û–ø–∏—Å:</b>\n${description.slice(0, 300)}...\n\n` +
        `üîó <a href="https://announcements.bybit.com/en/${url}">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è</a>`;

      // –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—Å—ñ–º –∞–¥–º—ñ–Ω–∞–º –∞–±–æ –ø–µ–≤–Ω–æ–º—É —á–∞—Ç—É (msg.chat.id)
      const chatId = process.env.TELEGRAM_CHAT_ID;
      if (chatId) {
        try {
          await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîª –í—ñ–¥–∫—Ä–∏—Ç–∏ —à–æ—Ä—Ç',
                    callback_data: `short:${currency}`
                  }
                ]
              ],
            },
          });
          console.log(`–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        } catch (err) {
          console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç ${chatId}:`, err.message);
        }
      } else {
        console.error("chatId –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.");
      }
      }
    }

    console.log("–ù–æ–≤–∏–Ω–∏ –ø—Ä–æ –¥–µ–ª—ñ—Å—Ç–∏–Ω–≥ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.");
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ API Bybit:", err.message);
  }
}

async function  extractCoinSymbolFromTitle(title) {
  if (!title) {
    return null;
  }
  const match = title.match(/\b[A-Za-z]+(?=USDT\b|[ -]USDT\b)/i);
  return match ? match[0] : null;
}

async function extractCoinNameFromContent(content) {
  if (!content) {
    return "Unknown"; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ content –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
  }
  return content.split(" ")[0]; // –¶–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫–ª–∞–¥
}
