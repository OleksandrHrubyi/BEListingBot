import futures from "../exchange/futures.js";
import checkAccess from "../utils/checkAccess.js";

export default function tradeFutures(bot) {
  bot.onText(/\Futures/, async (msg) => {
    const chatId = msg.chat.id;
    if (!checkAccess(msg.from.id)) {
      return bot.sendMessage(
        msg.chat.id,
        "üö´ –¶–µ–π –±–æ—Ç —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è."
      );
    }

    try {
      // 1. –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å
      const balance = await futures.fetchBalance();
      const usdt = balance.total.USDT || 0;

      // 2. –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó
      const positions = await futures.fetchPositions();
      const activePositions = positions.filter((pos) => pos.contracts > 0);

      let text = `üìä <b>–§‚Äô—é—á–µ—Ä—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç</b>\n\nüí∞ <b>USDT –±–∞–ª–∞–Ω—Å:</b> ${usdt.toFixed(
        2
      )} USDT\n`;

      if (activePositions.length > 0) {
        text += `\nüî• <b>–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:</b>\n`;

        for (const pos of activePositions) {
          const side = pos.side.toUpperCase(); // long / short
          const symbol = pos.symbol;
          const contracts = pos.contracts;
          const entry = pos.entryPrice;
          const unrealizedPnl = pos.unrealizedPnl;

          text += `\n‚Ä¢ ${symbol} (${side})\n`;
          text += `  - üìâ Entry: ${entry}\n`;
          text += `  - üî¢ Size: ${contracts}\n`;
          text += `  - üìà PnL: ${unrealizedPnl.toFixed(2)} USDT\n`;
        }
      } else {
        text += `\n‚õî –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π.`;
      }

      await bot.sendMessage(chatId, text, { parse_mode: "HTML" });
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —Ñ‚Äô—é—á–µ—Ä—Å–Ω–∏—Ö –¥–∞–Ω–∏—Ö:", error);
      await bot.sendMessage(
        chatId,
        "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ —Ñ‚Äô—é—á–µ—Ä—Å–∞–º."
      );
    }
  });
}
